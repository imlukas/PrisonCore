plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

tasks.build.dependsOn('shadowJar')

group = 'me.imlukas'
version = 'ALPHA-0.1'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://jitpack.io/'
    }
    maven {
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
    // jeff media grub
    maven {
        url = 'https://hub.jeff-media.com/nexus/repository/jeff-media-public/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT'
    implementation 'com.jeff_media:MorePersistentDataTypes:2.4.0'

    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly 'com.mojang:authlib:1.5.21'

    compileOnly fileTree(dir: "libs", include: ["*.jar"])

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor('org.projectlombok:lombok:1.18.24')
}
shadowJar {
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    destinationDirectory.set(file('C:\\Users\\Lukas Pinheiro\\Desktop\\testServer-1.19\\plugins'))
    minimize()
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
